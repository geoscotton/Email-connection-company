
# coding: utf-8

# ---
# 
# _You are currently looking at **version 1.2** of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the [Jupyter Notebook FAQ](https://www.coursera.org/learn/python-social-network-analysis/resources/yPcBs) course resource._
# 
# ---

# # Assignment 4

# In[2]:

import networkx as nx
import pandas as pd
import numpy as np
import pickle


# ---
# 
# ## Part 1 - Random Graph Identification
# 
# For the first part of this assignment you will analyze randomly generated graphs and determine which algorithm created them.

# In[2]:

P1_Graphs = pickle.load(open('A4_graphs','rb'))
P1_Graphs


# <br>
# `P1_Graphs` is a list containing 5 networkx graphs. Each of these graphs were generated by one of three possible algorithms:
# * Preferential Attachment (`'PA'`)
# * Small World with low probability of rewiring (`'SW_L'`)
# * Small World with high probability of rewiring (`'SW_H'`)
# 
# Anaylze each of the 5 graphs and determine which of the three algorithms generated the graph.
# 
# *The `graph_identification` function should return a list of length 5 where each element in the list is either `'PA'`, `'SW_L'`, or `'SW_H'`.*

# In[12]:

def graph_identification():
    
    # Your Code Here
    calcs = []
    for graph in P1_Graphs:
        calcs.append((max(nx.degree(graph).values()),nx.average_clustering(graph), nx.average_shortest_path_length(graph)))
    resp = ['PA','SW_L','SW_L','PA','SW_H']        
    return resp
graph_identification()


# ---
# 
# ## Part 2 - Company Emails
# 
# For the second part of this assignment you will be workking with a company's email network where each node corresponds to a person at the company, and each edge indicates that at least one email has been sent between two people.
# 
# The network also contains the node attributes `Department` and `ManagementSalary`.
# 
# `Department` indicates the department in the company which the person belongs to, and `ManagementSalary` indicates whether that person is receiving a management position salary.

# In[3]:

G = nx.read_gpickle('email_prediction.txt')

print(nx.info(G))


# ### Part 2A - Salary Prediction
# 
# Using network `G`, identify the people in the network with missing values for the node attribute `ManagementSalary` and predict whether or not these individuals are receiving a management position salary.
# 
# To accomplish this, you will need to create a matrix of node features using networkx, train a sklearn classifier on nodes that have `ManagementSalary` data, and predict a probability of the node receiving a management salary for nodes where `ManagementSalary` is missing.
# 
# 
# 
# Your predictions will need to be given as the probability that the corresponding employee is receiving a management position salary.
# 
# The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).
# 
# Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).
# 
# Using your trained classifier, return a series of length 252 with the data being the probability of receiving management salary, and the index being the node id.
# 
#     Example:
#     
#         1       1.0
#         2       0.0
#         5       0.8
#         8       1.0
#             ...
#         996     0.7
#         1000    0.5
#         1001    0.0
#         Length: 252, dtype: float64

# In[161]:

def salary_predictions():
    
    # Your Code Here
    #creating features, all I can think of
    df = pd.DataFrame(index=G.nodes())
    df['Department'] = pd.Series(nx.get_node_attributes(G, 'Department'))
    df['ManagementSalary'] = pd.Series(nx.get_node_attributes(G, 'ManagementSalary'))
    
    df['clustering'] = pd.Series(nx.clustering(G))
    df['degree'] = pd.Series(G.degree())
    df['degreecentrality'] = pd.Series(nx.degree_centrality(G))
    df['clsenesscentrality'] = pd.Series(nx.closeness_centrality(G))
    df['betweenness'] = pd.Series(nx.betweenness_centrality(G, normalized =True, endpoints=False))
    df['hubs']= pd.Series(nx.hits(G)[0])
    df['authorities']= pd.Series(nx.hits(G)[1])
    #eccntricity. since the graph is not connected, have to calculate for each connected component 
    #and then make it a dict only and not list of dicks. 
    
    ecc = []
    for x in nx.connected_component_subgraphs(G):
        ecc.append(nx.eccentricity(x))
    ecc2 = {}
    for d in ecc:
        ecc2.update(d)
    
    df['eccentricity'] = pd.Series(ecc2)
    #same for if node is center or not
    centers = []
    for x in nx.connected_component_subgraphs(G):
        centers.append(nx.center(x))
    centers = [item for sublist in centers for item in sublist]
    df.loc[centers,'centers']= 1
    df['centers'].fillna(0, inplace=True)
    
    #separating the future X to be predicted
    predizer = df[df['ManagementSalary'].isnull()]
    predizer.drop('ManagementSalary', inplace=True, axis=1)
    
    #separating the X and Y to be trained with
    teste = df[~df['ManagementSalary'].isnull()]
    y = teste['ManagementSalary']
    X = teste.loc[:,teste.columns!='ManagementSalary']
    
    """from sklearn.model_selection import train_test_split
    X_train, X_test, y_train, y_test = train_test_split( X, y)"""
    
    from sklearn.model_selection import GridSearchCV
    from sklearn.ensemble import RandomForestClassifier

    parametros = {'max_depth': range(1,31) , 'max_features':range(1,11)}
    grid = GridSearchCV(RandomForestClassifier(),param_grid = parametros, scoring='roc_auc', n_jobs=-1)
    grid.fit(X, y)
    #print(grid.best_params_)
    #print(grid.score(X_test, y_test))
    probabilities = grid.predict_proba(predizer)
    predizer['prob.Of1']=probabilities[:,1]
    
    return predizer['prob.Of1']


#salary_predictions()





# ### Part 2B - New Connections Prediction
# 
# For the last part of this assignment, you will predict future connections between employees of the network. The future connections information has been loaded into the variable `future_connections`. The index is a tuple indicating a pair of nodes that currently do not have a connection, and the `Future Connection` column indicates if an edge between those two nodes will exist in the future, where a value of 1.0 indicates a future connection.

# In[4]:

future_connections = pd.read_csv('Future_Connections.csv', index_col=0, converters={0: eval})
future_connections.head(10)


# Using network `G` and `future_connections`, identify the edges in `future_connections` with missing values and predict whether or not these edges will have a future connection.
# 
# To accomplish this, you will need to create a matrix of features for the edges found in `future_connections` using networkx, train a sklearn classifier on those edges in `future_connections` that have `Future Connection` data, and predict a probability of the edge being a future connection for those edges in `future_connections` where `Future Connection` is missing.
# 
# 
# 
# Your predictions will need to be given as the probability of the corresponding edge being a future connection.
# 
# The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).
# 
# Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).
# 
# Using your trained classifier, return a series of length 122112 with the data being the probability of the edge being a future connection, and the index being the edge as represented by a tuple of nodes.
# 
#     Example:
#     
#         (107, 348)    0.35
#         (542, 751)    0.40
#         (20, 426)     0.55
#         (50, 989)     0.35
#                   ...
#         (939, 940)    0.15
#         (555, 905)    0.35
#         (75, 101)     0.65
#         Length: 122112, dtype: float64

# In[49]:

def new_connections_predictions():
    
    # Your Code Here
    future_connections['preferential attachment'] = [i[2] for i in nx.preferential_attachment(G, future_connections.index)]
    future_connections['Common Neighbors'] = future_connections.index.map(lambda person: len(list(nx.common_neighbors(G, person[0], person[1]))))
    future_connections['jacc'] = [i[2] for i in nx.jaccard_coefficient(G, future_connections.index)]
    future_connections['resourceallocation'] = [i[2] for i in nx.resource_allocation_index(G, future_connections.index)]
    future_connections['communitycommom'] = [i[2] for i in nx.cn_soundarajan_hopcroft(G, future_connections.index, community='Department')]
    future_connections['communityresource'] = [i[2] for i in nx.ra_index_soundarajan_hopcroft(G, future_connections.index, community='Department')]
    
    predizer = future_connections[future_connections['Future Connection'].isnull()]
    predizer.drop('Future Connection', inplace=True, axis=1)

    teste = future_connections[~future_connections['Future Connection'].isnull()]
    y = teste['Future Connection']
    X = teste.loc[:,teste.columns!='Future Connection']
    
    from sklearn.model_selection import GridSearchCV
    from sklearn.linear_model import LogisticRegression

    parametros = {'C': [0.001,0.01,0.05] }
    grid = GridSearchCV(LogisticRegression(solver='sag', class_weight='balanced'),param_grid = parametros, scoring='roc_auc', n_jobs=-1)
    grid.fit(X, y)
    
    probabilities = grid.predict_proba(predizer)
    predizer['prob.Of1']=probabilities[:,1]
    
    return predizer['prob.Of1']
    


# In[5]:




# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:




# In[ ]:



